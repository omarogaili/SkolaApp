@page "/applications/Ansökan"
@inject OmarOgailiSkolan.Data.OmarOgailiSkolanContext DB
@using OmarOgailiSkolan
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<link rel="stylesheet" href="ValidationStyle.css" />
<PageTitle>Create</PageTitle>
@if (isSaved)
{
    <h1>Ansök Idag</h1>

    <h4>Fyll blanketten nedan</h4>
    <hr />
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Application" OnValidSubmit="AddApplication" FormName=" create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Application.Name" class="form-control" />
                    @*om namnet inte är grön då kommer detta meddelandet *@
                    @if (!validationMessage)
                    {
                        <ValidationMessage For="() => Application.Name" class="text-danger" />
                        <p id="emailError">@nameError</p>
                    }

                </div>
                <div class="mb-3">
                    <label for="dateofbirth" class="form-label">Dateofbirth:</label>
                    <InputDate id="dateofbirth" @bind-Value="Application.Dateofbirth" class="form-control" />
                    <ValidationMessage For="() => Application.Dateofbirth" class="text-danger" />
                </div>


                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Application.Email" class="form-control" />
                    <ValidationMessage For="() => Application.Email" class="text-danger" />
                        @*om mail inte är grön då kommer detta meddelandet *@
                    @if (!validationMessage)
                    {

                        <p id="emailError">@emailError</p>
                    }
                </div>
                <div class="mb-3">
                    <label for="Age" class="form-label">Age:</label>
                    <span>@validation.Agecalculate(Application.Dateofbirth)</span>
                    @if (validation.Agecalculate(Application.Dateofbirth) > 10)
                    {
                        Application.Age = validation.Agecalculate(Application.Dateofbirth);
                    }
                    <ValidationMessage For="() => Application.Age" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Create</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <h3>Vi har tagit emot din ansöka! </h3>
    <div>
        <a href="/applications/create" target="_blank">tillbaka till blanketten</a>
    </div>
}


@code {

    [SupplyParameterFromForm]
    public Application Application { get; set; } = new();
    private Validation validation = new Validation();
    private bool isSaved = true;
    string emailError = "";
    string nameError = "";
    private bool validationMessage = true;
    /// <summary>
    /// Den metoden ränkar åldern, samt att jag kontrollerar om användaren har fyllt år i år.
    /// metoden tar en DateTime parameter  och innehåller en variabel som spara dagens DateTime.Today
    /// detta anvädnare jag senare för att räkna elevens ålder jag minskar today.år från den parameter år som jag skickar
    /// en till metoden. med if satsen kontrollerar jag om födelsedatumet har inträffats i år eller inte samt om
    /// födelsedagen är före den dagen vi är på idag. om den inte har det då minska vi med ett för att personen har inte
    /// fyllt år än.
    /// </summary>
    /// <param name="dateOfBirth">En parameter som skickas till metoden och  den  ska vara då Application.Dateofbirt </param>
    /// <returns>Metoden ska retunerar Application.Age jag valde inte skapa en variabel för att spara åldren i
    ///  eftersom jag anser att detta var mer tydlig för mig att den metoden ska kontrollerar åldren och skicka tillbaka
    ///   åldern så att jag kan spara det i databasen samt visa den i sidan när användaren skriver sin födelsedatum
    /// </returns>
    /// 
    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddApplication()
    {
        // jag kollar här om validering är gödkänt då är vi gröna och datan kan sparas i databasen 
        if (Validation.EmailCheck(Application.Email) && Validation.NameValid(Application.Name))
        {
            validationMessage = true;
            DB.Application.Add(Application);
            await DB.SaveChangesAsync();
            // await ReadingTheTextFile();
            isSaved = false;
        }
        // annars så ska användaren får ett fel meddelnadet enligt vad är det som var fel är det namnet som inte blev grön då ska
        // användaren får ett fel meddelande som säger att namnet är fel 
        if (!Validation.NameValid(Application.Name))
        {
            validationMessage = false;
            nameError = "Ogilit namn! för & efter namn behöver du skriva ";
        }
        // annars så är det mailet. Vad det gäller ålder som ska vara 10 eller äldre så har jag angett ett gräns i modelklassen Application
        //samt att jag har gjort en liten kontroll där om åldren är mindre än 10 då ska åldren vara 0 och då sparas den inte i databasen. 
        if (!Validation.EmailCheck(Application.Email))
        {
            validationMessage = false;
            emailError = "Ogilit Email";
        }

    }
    /// <summary>
    /// den metoden så läser jag genom  fela filen som vi har  för databasen i learnpoint
    /// jag skapar en list av Application klassen och en till list för alla information som finns i text filen. och det som jag gör sedan är att jag tarbort
    /// första raden eftersom jag fick en töm kolumn första gången, efter det så gör jag en loop där jag gör en konroll där det finns en töm string eller en
    /// enter, och de sparar jag i parst array.  sedan skapar jag en ny insats av application klassen och där så spara jag börjar jag spara från den första
    /// parts [1] som ska vara namnet, och sedan andra parts som ska vara födelsedatumet och osv. sen ligger jag all dessa i listan som jag har skapat
    /// av Application klassen och sedan kallar jag på den metoden i AddApplication(). 
    /// </summary>
    /// OBS: Björn sätt att spara datan var mycket mer smidygare kolla på lektion nr 16 word doc. 
    // private async Task ReadingTheTextFile()
    // {
    //     await Task.Run(()=>
    // {
    //     List<Application> applications = new List<Application>();
    //     List<string> fillines = File.ReadAllLines("hogwarts-students.txt").ToList();
    //     fillines.RemoveAt(0);
    //     foreach(string line in fillines)
    //     {
    //         string[] parts = line.Split(new char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
    //         Application application = new Application();
    //         application.Name = parts[1];
    //         application.Dateofbirth= DateTime.Parse(parts[2]);
    //         application.Age = Agecalculate();
    //         application.Email = parts[3];
    //         applications.Add(application);
    //     }
    // });
    // }
}
